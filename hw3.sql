/* 1. I prefer to use joins since joins generally use less space to run it, and it is more efficient
2. The CTE specifices a temporary named result set that you can reference. It can also be used in a View.
3. A table variable is a local variable that has some similarities to temp tables. Table variables are created via adeclartion statement like other local vairabls. A table variable is scoped to the stored procedure. You cannot use a table variable as an input or an output parameter.
4. Turncate reseeds identity values, whereas delete doesn't. Truncate removes all records and doesn't fire triggers. Turncate is faster compared to delete as it makes less use of the transaction log.
5. An identity column is a column in a databse table that is made up of values generated by the database. The delete statement will deleted all the rows, while truncate statement will remove all the rows.
6. The delete statement removes rows one at atime and records an entry in the rransaction log for each deleted row. Truncate table removes the data by deallocating the data pages used to store the table data and records only the page deallocations in the transaction log.
*/

/*1*/
select distinct City from Customers
Where city in (Select City from Employees)
/*2a*/
select distinct City
from Customers
where city not in (SELECT City from Employees)
/*2b*/
select distinct c.City
from Customers c
left join Employees e
on c.City = e.City
/*3*/
SELECT c.CustomerID, c.CompanyName, c.ContactName,
SUM(od.Quantity) AS QTY FROM
Customers c
LEFT JOIN
Orders o
ON c.CustomerID = o.CustomerID
LEFT JOIN
[Order Details] od
ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName, c.ContactName
ORDER BY QTY desc
/*4*/
SELECT c.City,
SUM(od.Quantity) AS QTY FROM
Customers c
LEFT JOIN
Orders o
ON c.CustomerID = o.CustomerID
LEFT JOIN
[Order Details] od
ON o.OrderID = od.OrderID
GROUP BY c.City
ORDER BY QTY desc
/*5a*/
select u.City from Customers u group by u.City having COUNT(u.City) > 2
union
select c.City from Customers c group by c.City having COUNT(c.City) = 2/*5b*/
select distinct c.City
from Customers c
where c.City in (select u.City from Customers u group by u.City having COUNT(u.City) >= 2
/*6*/
select distinct c.City
from Orders o inner join Customers c
on o.CustomerID = c.CustomerID
inner join [Order Details] r
on r.OrderID = o.OrderID
group by c.City, r.ProductID
having count(r.ProductID) > 2
/*7*/
select * from Customers c
where c.City not in
(select o.ShipCity from Orders o inner join Customers c on o.ShipCity = c.City)
/*8*/
WITH cte_ordersc
as(
SELECT oc.ShipCity,oc.ProductID, oc.average,DENSE_RANK() over (partition by
oc.ProductID order by oc.number) rnk FROM (
SELECT TOP(5) od.ProductID,o.ShipCity, SUM(Quantity) number,AVG(od.UnitPrice)
average FROM dbo.Orders o left join dbo.[Order Details] od on o.OrderID=od.OrderID
GROUP BY o.ShipCity, od.ProductID
ORDER BY number DESC
) oc
)
select * from cte_ordersc where rnk=1
/*9a*/
select e.City from Employees e
where e.City not in (
select c.City from Orders o inner join Customers c
on c.CustomerID = o.CustomerID)/*9b*/
select distinct e.City from Employees e
left join Customers c
on e.City = c.City
where c.City is null

/*10a*/
select * from
(select Top 1 e.City, count(o.OrderID) countOrder from Employees e inner join Orders o
on e.EmployeeID = o.EmployeeID
group by e.City) T1
inner join (
select Top 1 c.City, count(r.Quantity) countQuantity from [Order Details] r inner join
Orders d on r.OrderID = d.OrderID
inner join Customers c on c.CustomerID = d.CustomerID group by c.City) T2
on T1.City = T2.City;/*10b*/Find duplicate rows using GROUP BY clause or ROW_NUMBER() function.
Use DELETE statement to remove the duplicate rows.


/*11*/
select countbydept.*
from (
 select deptid, count(*) as departCount
 from Employee
 group by deptid
 order by departCount desc
 limit 1
) as maxcount
inner join
( select dept.id, dept.`name`, count(*) as employeeCount
 from Dept
 inner join Employee on Employee.deptid = deptid
 group by deptid, deptname
) countbydept

/*12*/
SELECT deptname,empid,salary
FROM(
SELECT d.deptname, e.empid, e.salary, rank() OVER ( PARTITION BY e.deptid ORDER BY
 e.salary DESC ) AS rnk
 FROM dept d, employee e
 WHERE d.deptid = e.deptid
 )
WHERE rnk <= 3
ORDER BY deptname,rnk

/*14*/
SELECT deptname,empid,salary
FROM (
SELECT d.deptname, e.empid, e.salary, rank() OVER ( PARTITION BY e.deptid ORDER BY
e.salary DESC ) AS rnk
 FROM dept d, employee e
 WHERE d.deptid = e.deptid
 )
WHERE rnk <= 3
ORDER BY deptname,rnk

